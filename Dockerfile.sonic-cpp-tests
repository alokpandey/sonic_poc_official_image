# SONiC C++ Functional Tests Dockerfile
FROM ubuntu:20.04

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Install build dependencies and tools
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    g++ \
    gcc \
    make \
    pkg-config \
    git \
    curl \
    wget \
    docker.io \
    redis-tools \
    net-tools \
    iputils-ping \
    jq \
    vim \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /sonic_tests

# Copy source code
COPY src/cpp/ ./src/cpp/
COPY Makefile.cpp ./Makefile

# Create build directory
RUN mkdir -p build

# Build the C++ test suite
RUN make clean && make all

# Create test results directory
RUN mkdir -p /sonic_tests/results

# Set environment variables
ENV SONIC_CONTAINER_NAME=sonic-vs-official
ENV TEST_RESULTS_DIR=/sonic_tests/results

# Create test runner script
RUN echo '#!/bin/bash\n\
echo "=== SONiC C++ Functional Test Suite ==="\n\
echo "Container: $SONIC_CONTAINER_NAME"\n\
echo "Results Directory: $TEST_RESULTS_DIR"\n\
echo ""\n\
\n\
# Check if SONiC container is running\n\
if ! docker ps | grep -q $SONIC_CONTAINER_NAME; then\n\
    echo "Error: SONiC container ($SONIC_CONTAINER_NAME) is not running"\n\
    echo "Please start the SONiC container first:"\n\
    echo "  docker-compose -f docker-compose-real-sonic.yml up -d"\n\
    exit 1\n\
fi\n\
\n\
# Wait for SONiC to be ready\n\
echo "Waiting for SONiC container to be ready..."\n\
for i in {1..30}; do\n\
    if docker exec $SONIC_CONTAINER_NAME redis-cli ping >/dev/null 2>&1; then\n\
        echo "SONiC container is ready!"\n\
        break\n\
    fi\n\
    echo "Waiting... ($i/30)"\n\
    sleep 2\n\
done\n\
\n\
# Run the tests\n\
echo "Starting C++ functional tests..."\n\
timestamp=$(date +"%Y%m%d_%H%M%S")\n\
output_file="$TEST_RESULTS_DIR/sonic_cpp_tests_$timestamp.txt"\n\
\n\
./build/sonic_functional_tests "$@" --output "$output_file"\n\
test_result=$?\n\
\n\
echo ""\n\
echo "Test execution completed!"\n\
echo "Results saved to: $output_file"\n\
echo "Exit code: $test_result"\n\
\n\
exit $test_result\n\
' > /sonic_tests/run_tests.sh && chmod +x /sonic_tests/run_tests.sh

# Create quick test script
RUN echo '#!/bin/bash\n\
echo "=== SONiC C++ Quick Test Suite ==="\n\
./run_tests.sh --quick --verbose\n\
' > /sonic_tests/quick_tests.sh && chmod +x /sonic_tests/quick_tests.sh

# Create HAL-only test script
RUN echo '#!/bin/bash\n\
echo "=== SONiC HAL Tests Only ==="\n\
./run_tests.sh --hal-only --verbose\n\
' > /sonic_tests/hal_tests.sh && chmod +x /sonic_tests/hal_tests.sh

# Create SAI-only test script
RUN echo '#!/bin/bash\n\
echo "=== SONiC SAI Tests Only ==="\n\
./run_tests.sh --sai-only --verbose\n\
' > /sonic_tests/sai_tests.sh && chmod +x /sonic_tests/sai_tests.sh

# Create stress test script
RUN echo '#!/bin/bash\n\
echo "=== SONiC Stress Tests ==="\n\
./run_tests.sh --stress-tests --verbose --timeout 300\n\
' > /sonic_tests/stress_tests.sh && chmod +x /sonic_tests/stress_tests.sh

# Health check script
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD ./build/sonic_functional_tests --quick --quiet || exit 1

# Default command
CMD ["./run_tests.sh", "--verbose"]

# Labels
LABEL maintainer="SONiC POC Team"
LABEL description="SONiC C++ Functional Test Suite - HAL and SAI Testing"
LABEL version="1.0"
